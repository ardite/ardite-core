//! This module focuses on handling errors generated when using Ardite in a
//! graceful manner.

/// Any error generated by Ardite or itâ€˜s drivers should be output using this
/// type. This allows for a comprehensive display of the error when a service
/// reports it to the user.
pub struct Error<'a> {
  /// A specific error code which describes the error.
  code: ErrorCode,
  /// A message providing more detail beyond the error code.
  message: &'a str,
  /// A hint to the user on what to do next to try and avoid the error
  /// happening again. This is optional.
  hint: Option<&'a str>
}

impl<'a> Error<'a> {
  /// Easily create a new error.
  pub fn new(code: ErrorCode, message: &'a str) -> Self {
    Error {
      code: code,
      message: message,
      hint: None
    }
  }

  /// Convenience function for creating an unimplemented error with a plain
  /// message describing what is unimplemented.
  pub fn unimplemented(message: &'a str) -> Self {
    Error {
      code: ErrorCode::NotImplemented,
      message: message,
      hint: None
    }
  }
}

/// The code of an error. Designed to easily map to [HTTP status codes][1].
///
/// [1]: http://www.restapitutorial.com/httpstatuscodes.html
pub enum ErrorCode {
  /// A bad syntax was used. Maps to 400.
  BadRequest = 400,
  /// Permissions do not allow this to happen. Maps to 403.
  Forbidden = 403,
  /// Resource was not found. Maps to 404.
  NotFound = 404,
  /// Present data made the request fail. Maps to 409.
  Conflict = 409,
  /// There was an invalid range. Maps to 416.
  BadRange = 416,
  /// Something bad happened inside a driver. Maps to 500.
  Internal = 500,
  /// The feature has not been implemented. Maps to 501.
  NotImplemented = 501
}
