//! This module focuses on handling errors generated when using Ardite in a
//! graceful manner.

/// Any error generated by Ardite or it‘s drivers should be output using this
/// type. This allows for a comprehensive display of the error when a service
/// reports it to the user.
pub struct Error {
  /// A specific error code which describes the error.
  code: ErrorCode,

  /// A message providing more detail beyond the error code.
  message: String,

  /// A hint to the user on what to do next to try and avoid the error
  /// happening again. This is optional.
  hint: Option<String>
}

/// The code of an error. Designed to easily map to [HTTP status codes][1].
///
/// [1]: http://www.restapitutorial.com/httpstatuscodes.html
pub enum ErrorCode {
  Unknown,       /// The most generic error code. Maps to 500.
  BadRequest,    /// A bad syntax was used. Maps to 400.
  Forbidden,     /// Permissions do not allow this to happen. Maps to 403.
  NotFound,      /// Resource was not found. Maps to 404.
  Conflict,      /// Present data made the request fail. Maps to 409.
  BadRange,      /// There was an invalid range. Maps to 416.
  Internal,      /// Something bad happened inside a driver. Maps to 500.
  NotImplemented /// The feature has not been implemented. Maps to 501.
}

impl ErrorCode {
  /// Get‘s the HTTP status code from the `ErrorCode` enum.
  get_http_status_code(&self) {
    match self {
      Unknown        => 500,
      BadRequest     => 400,
      Forbidden      => 403,
      NotFound       => 404,
      Conflict       => 409,
      BadRange       => 416,
      Internal       => 500,
      NotImplemented => 501
    }
  }
}
